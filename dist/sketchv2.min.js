var state={};function setupScene(t){let[e,n]=t.resolution,a=t.bounds,s=t.from,o=t.to,l=getCameraMatrix(s,o),i=getPerspectiveMatrix(...a),r=math.multiply(i,l);state.cam=l,state.persp=i,state.W2NDC=r,createCanvas(e,n),pixelDensity(1),console.log("Finished setup")}var printSparse=0;function computeColor(t,e,n,a,s,o){let l=[...t];for(let t=0;t<e.length;t++){const o=Math.max(0,math.abs(math.dot(a,e[t].d))),i=dVMultFn(n.Kd*o,e[t].c);let r=math.subtract([0,0,1],s);r=normalize(r);let c=math.add(r,e[t].d);c=normalize(c);const m=o>0?Math.pow(Math.max(0,dotFn(a,c)),n.n):0,u=dVMultFn(n.Ks*m,e[t].c);l=vecAdd(l,i,u)}if(o){const t=getTexture(o[0],o[1],o);l=vecAdd(l,t)}return dVMultFn(255,VeMultFn(l,n.Cs))}function getTexture(t,e,n){t=Math.min(t,1),e=Math.min(e,1);const a=(1-t)*((n=consts.texture.teapot1)[0].length-2),s=e*(n.length-2),o=Math.trunc(a),l=Math.trunc(s),i=a-o,r=s-l;void 0!==n&&void 0!==n[o]&&void 0!==n[o][l]||console.log(t,e,o,l,n.length,n[0].length);const c=n[o][l].slice(0,3),m=n[1+o][1+l].slice(0,3),u=n[1+o][l].slice(0,3),d=n[o][1+l].slice(0,3),p=vecAdd(dVMultFn(i,u),dVMultFn(1-i,c)),h=vecAdd(dVMultFn(i,m),dVMultFn(1-i,d)),g=vecAdd(dVMultFn(r,h),dVMultFn(1-r,p));return dVMultFn(1/255,g)}function setupShaders(t){let e,n=[];for(let a of t)"ambient"===a.type?e=a:n.push(a);const a=dVMultFn(e.intensity,e.color),s=n.map(t=>{let e=math.subtract(t.to,t.from);return e=math.multiply(state.cam,[...t.from.map(t=>[t]),[1]]),{d:normalize(v4_2_v3(squeezeFn(e))),c:math.multiply(t.color,t.intensity)}});state.computeColorBase=((t,e,n,o)=>computeColor(a,s,t,e,n,o))}function getPerspectiveMatrix(t,e,n,a,s,o){const l=2*t,i=e+t,r=e-t,c=a-n,m=a+n,u=s-o,d=s+o;return state.z_=(t=>i/r+e*l/t),[[l/c,0,m/c,0],[0,l/u,d/u,0],[0,0,-i/r,-e*l/r],[0,0,1,0]]}function transformPosition(t,e,n,a,s,o,l,i){let r=[[t],[e],[n],[1]],c=math.multiply(state.O2C,r),m=math.multiply(state.persp,c);(m=math.divide(m,m[3][0]))[2][0]=state.z_(m[2][0]);let u=math.multiply(state.O2C_i_t,[[a],[s],[o],[1]]);u=normalize(v4_2_v3(squeezeFn(u)));const[d,p,h]=state.computeColor(u,[m[0][0],m[1][0],m[2][0]]);return[m[0][0],m[1][0],m[2][0],u[0],u[1],u[2],d,p,h,l,i]}function setPixel(t,e,n,a,s,o){const l=4*(t+e*width);pixels[l]=state.fb[l]=n,pixels[l+1]=state.fb[l+1]=a,pixels[l+2]=state.fb[l+2]=s,pixels[l+3]=state.fb[l+3]=o}function processText(t){let e=t.trim().split("\n"),n=[];for(;e.length>0;){let[,t,a,s]=e.splice(0,4);n.push([t.split(/[ \t]/).map(Number),a.split(/[ \t]/).map(Number),s.split(/[ \t]/).map(Number)])}return n}function drawObject(t){let e=0,n=0,a=0,s=[1,1,1],o=[0,0,0];for(let l of t.transforms)e=l.Rx||e,n=l.Ry||n,a=l.Rz||a,s=l.S||s,o=l.T||o;const l=getTranslationMatrix(...o),i=getRotationMatrix(e,n,a),r=getScaleMatrix(...s),c=math.multiply(r,i);state.O2C=math.chain(state.cam).multiply(l).multiply(c).done(),state.O2C_i_t=math.chain(getRotationMatrix(-e,-n,-a)).multiply(math.divide(1,r)).multiply(math.inv(state.cam)).transpose().done(),state.O2W=math.chain(l).multiply(c).done(),state.O2W_i_t=math.chain(i).inv().multiply(math.divide(1,r)).done();let m=geometries[t.geometry];state.computeColor=((e,n,a)=>state.computeColorBase(t.material,e,n,a));for(let e of m)state.myshader(JSON.parse(JSON.stringify(e)),t.material)}function renderScene(t){console.log("Rendering scene",t);for(let e of t){console.log("Drawing: ",e.id);const t=Date.now();drawObject(e),console.log("Finished in: ",Date.now()-t)}}var geometries={};function preload(){consts.texture.teapot1=getDots()}function setup(){geometries.teapot=processText(consts.geos.teapot),geometries.triangle=processText(consts.geos.triangle),state.myshader=phongShader;let t=consts.scene;state.scene=t,setupScene(t.scene.camera),setupShaders(t.scene.lights),state.z=new Float32Array(width*height),state.z.fill(Number.POSITIVE_INFINITY),state.fb=new Uint8ClampedArray(width*height*4)}function myredraw(){let t=state.scene;state.z.fill(Number.POSITIVE_INFINITY),state.fb.fill(0),setupScene(t.scene.camera),setupShaders(t.scene.lights),redraw()}function draw(){let t=state.scene;const e=Date.now();background("lightgray"),loadPixels(),renderScene(t.scene.shapes),console.log("Rendered in: ",Date.now()-e),updatePixels(),noLoop()}