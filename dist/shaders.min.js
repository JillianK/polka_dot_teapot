function phongShader(t){const e=t[0].slice(0,3),i=t[1].slice(0,3),h=t[2].slice(0,3),[o,l,n,r,d,s,,,,m,a]=transformPosition(...t[0]),[f,c,p,u,w,_,,,,x,g]=transformPosition(...t[1]),[P,F,M,V,z,v,,,,A,S]=transformPosition(...t[2]),T=width_helper(o),C=height_helper(l),b=width_helper(f),j=height_helper(c),k=width_helper(P),q=height_helper(F),y=(t,e)=>(C-j)*t+(b-T)*e+T*j-b*C,B=(t,e)=>(j-q)*t+(k-b)*e+b*q-k*j,D=(t,e)=>(q-C)*t+(T-k)*e+k*C-T*q,E=(t,e,i)=>t*n+e*p+i*M,G=floor(max(min(T,b,k),0)),H=ceil(min(max(T,b,k),width-1)),I=floor(max(min(C,j,q),0)),J=ceil(min(max(C,j,q),height-1)),K=B(T,C),L=D(b,j),N=y(k,q);for(let t=I;t<=J;t++)for(let o=G;o<=H;o++){const l=B(o,t)/K,f=D(o,t)/L,c=y(o,t)/N;if(l>=0&&f>=0&&c>=0){let P=E(l,f,c);if(P<state.z[o+t*width]){let F=vecAdd(dVMultFn(l,[r,d,s]),dVMultFn(f,[u,w,_]),dVMultFn(c,[V,z,v]));F=normalize(F);const[T,C,b]=state.computeColor(F,vecAdd(dVMultFn(l,e),dVMultFn(f,i),dVMultFn(c,h)),[(l*m/n+f*x/p+c*A/M)*P,(l*a/n+f*g/p+c*S/M)*P]);setPixel(o,t,T,C,b,255),state.z[o+t*width]=P}}}}function defaultShader(t,e){const[i,h,o,,,,l,n,r,d,s]=transformPosition(...t[0]),[m,a,f,,,,,,,c,p]=transformPosition(...t[1]),[u,w,_,,,,,,,x,g]=transformPosition(...t[2]),P=width_helper(i),F=height_helper(h),M=width_helper(m),V=height_helper(a),z=width_helper(u),v=height_helper(w),A=(t,e)=>(F-V)*t+(M-P)*e+P*V-M*F,S=(t,e)=>(V-v)*t+(z-M)*e+M*v-z*V,T=(t,e)=>(v-F)*t+(P-z)*e+z*F-P*v,C=(t,e,i)=>t*o+e*f+i*_,b=floor(max(min(P,M,z),0)),j=ceil(min(max(P,M,z),width-1)),k=floor(max(min(F,V,v),0)),q=ceil(min(max(F,V,v),height-1)),y=S(P,F),B=T(M,V),D=A(z,v);for(let t=k;t<=q;t++)for(let e=b;e<=j;e++){const i=S(e,t)/y,h=T(e,t)/B,o=A(e,t)/D;if(i>=0&&h>=0&&o>=0){let m=C(i,h,o);if(m<state.z[e+t*width]){const[a,f,u]=dVMultFn(255,getTexture(i*d+h*c+o*x,i*s+h*p+o*g));setPixel(e,t,a+l,f+n,u+r,255),state.z[e+t*width]=m}}}}function goraudShader(t,e){const[i,h,o,,,,l,n,r,d,s]=transformPosition(...t[0]),[m,a,f,,,,c,p,u,w,_]=transformPosition(...t[1]),[x,g,P,,,,F,M,V,z,v]=transformPosition(...t[2]),A=[l,n,r],S=[c,p,u],T=[F,M,V],C=width_helper(i),b=height_helper(h),j=width_helper(m),k=height_helper(a),q=width_helper(x),y=height_helper(g),B=(t,e)=>(b-k)*t+(j-C)*e+C*k-j*b,D=(t,e)=>(k-y)*t+(q-j)*e+j*y-q*k,E=(t,e)=>(y-b)*t+(C-q)*e+q*b-C*y,G=(t,e,i)=>t*o+e*f+i*P,H=floor(max(min(C,j,q),0)),I=ceil(min(max(C,j,q),width-1)),J=floor(max(min(b,k,y),0)),K=ceil(min(max(b,k,y),height-1)),L=D(C,b),N=E(j,k),O=B(q,y);for(let t=J;t<=K;t++)for(let e=H;e<=I;e++){const i=D(e,t)/L,h=E(e,t)/N,l=B(e,t)/O;if(i>=0&&h>=0&&l>=0){let n=G(i,h,l);if(n<state.z[e+t*width]){const[r,m,a]=vecAdd(dVMultFn(i,A),dVMultFn(h,S),dVMultFn(l,T),dVMultFn(255,getTexture((i*d/o+h*w/f+l*z/P)*n,(i*s/o+h*_/f+l*v/P)*n)));setPixel(e,t,r,m,a,255),state.z[e+t*width]=n}}}}